/*Create Account class having instance member 
1. id- id should be generated by application, it is readonly property
2. name – write getter setter 
3. balance- Write getter setter 
Declare static float Interestrate=0.07.
It has deposit method who’s job is to increase the balance.
It has withdraw method who’s job is to reduce balance.
Declare conts float minbal=1000. When user withdraw money your application should ensure that minimum balance is maintain. 
Give appropriate validation like user can not deposit or withdraw 0 or negative. user can not open account with 0 amount
When you run your application at the beginning it should print name of bank and copy right detail.
It has static method which will calculate and return  interest amount for each account holder and increase the balance.
Write display method who’s job is to display Id name and balance and interest received.
If you are comfortable the exception try to use it and handle it also.*/

using System;
using acc_lib;

namespace _2_Account_getter_setter
{
    class Program
    {
        static Program()
        {
            Console.WriteLine("\n-------------------------------------------------------------------");
            Console.WriteLine("\n************************* Bank Of Unknowns ********************************\n");
            Console.WriteLine("-------------------------------------------------------------------\n");
        }

        public static Account createAccount()
        {
            Account a1 = null;
            Console.Write("Enter Name & Balance Of Customer \nName : ");
            string name = Console.ReadLine();
            Console.Write("Balance : ");
            double amt;
            if (double.TryParse(Console.ReadLine(), out amt))
                try
                {
                    a1 = new Account(name, amt);
                }
                catch (MinBalEx)
                {
                    Account.decGetId();
                    Console.WriteLine("\nMinimum balance should be Rs1000\nDo you want to create the account again?Y/N");
                    char ch = char.Parse(Console.ReadLine());
                    switch (ch)
                    {
                        case 'y':
                        case 'Y':
                            a1 = createAccount();
                            return a1;
                        case 'n':
                        case 'N':
                            return a1;
                        default:
                            Console.WriteLine("\nInvalid choice input using Y or N Only .Try again....");
                            return a1;
                    }
                }
                catch (Exception)
                {
                    Account.decGetId();
                    Console.WriteLine("\nName cannot be empty try again");
                    a1 = createAccount();
                    return a1;
                }

            else
            {
                Console.WriteLine("\nAmount can only be numeric");
                a1 = createAccount();
                return a1;
            }
            return a1;
        }

        static void Main(string[] args)
        {
            Account a2 = createAccount();
            a2.disp();
            try
            {
                Console.Write("Enter amount to deposit in {0}'s Account : ", a2.Name);
                double amt = double.Parse(Console.ReadLine());
                a2.deposit(amt);

                Console.Write("Enter amount to withdraw in {0}'s Account : ", a2.Name);
                amt = double.Parse(Console.ReadLine());
                a2.withdrawl(amt);
            }
            catch (InvalidAmtEx)
            {
                Console.WriteLine("\nAmount is less than min-balance of 1000 so account cant be created.\n");
            }
            catch (MinBalEx)
            {
                Console.WriteLine("\nCan't Withdraw As the Amount will Reduce the account below minimum required balance.\n");
            }
            Console.ReadLine();
        }
    }
}
